'muss rein, damit alle Funktionen global erreichbar sind. Als .lss Datei raus, wie auch alle Use-Einbindungen
'%INCLUDE "C:\1fgl\workspace\Eclipse3FGL\LSZKernel\libkernel\ZAPI.Basic.Asset.lss"
'Use "ZCore.Kernel.Include"     
'Private Const sLibZZZ = "ZZZBasicKernelThemHandler"
Class KernelKernelUseObjectZZZ As ObjectZZZ
	Private objKernel As KernelZZZ
	
	Public Property Get ClassLibrary As String
		ClassLibrary = "ZBasic.Kernel.Them"
	End Property
	
	Property Get KernelObject As KernelZZZ
		Set KernelObject = Me.objKernel
	End Property
	Property Set KernelObject As KernelZZZ
		Set Me.objKernel = KernelObject
	End Property  
	
	'### Verkürzter Zugriff auf Kernel-Properties, merke: Das dürfen nur Get-Methoden sein. Um diese Properties zu Ändern muss das Kernel-Objekt ausgetauscht werden.
	Property Get Session As NotesSession
		If Not Me.KernelObject Is Nothing Then
			Set session = Me.KernelObject.Session
		Else
			Set session = New notessession
		End If
	End Property
	
	Property Get LogObject As KernelKernelLogZZZ
		On Error Goto ErrObj
		Set LogObject = Me.KernelObject.LogObject
		If Me.KernelObject.Error.iCode > 0 Then Error iERR_OBJECT_ERR, Me.MessageAllReceive(Me.KernelObject, iMSG_TYPE_ERROR,"")
EndTrue:
		Exit Property
EndFalse:
		Set LogObject = Nothing
		Exit Property
EndError:
		Set LogObject = Nothing
		Exit Property
Errobj:
		Dim sScript As String
		sScript = Me.ClassLibrary & "/Property KernelLog" 'sScript = Me.ClassLibrary & "/Property KernelLog"
		Call Me.MessageAppend("",sScript,Erl,Error$, Err, "")
		Select Case Err
		Case iMSG_NEXT, iERR_NEXT: Resume Next
		Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
		Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
		Case Else: Resume EndError
		End Select
	End Property
	
	Property Get KernelKey As String
		On Error Goto ErrObj
		
		'!!! immer wenn anschliessend nach Error.iCode gefragt wird, dann muss dieser Code vorher leer gesetzt werden
		Me.KernelObject.Error.iCode = 0
		Me.KernelObject.Error.sString = ""
		
		KernelKey = Me.KernelObject.KernelKey		
		If Me.KernelObject.Error.iCode > 0 Then Error iERR_OBJECT_ERR, Me.MessageAllReceive(Me.KernelObject, iMSG_TYPE_ERROR,"")
EndTrue:
		Exit Property
EndFalse:
		KernelKey = ""
		Exit Property
EndError:
		KernelKey=""
		Exit Property
Errobj:
		Dim sScript As String
		sScript = Me.ClassLibrary & "/Property KernelKey"
		Call Me.MessageAppend("",sScript,Erl,Error$, Err, "")
		Select Case Err
		Case iMSG_NEXT, iERR_NEXT: Resume Next
		Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
		Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
		Case Else: Resume EndError
		End Select
	End Property
	
	
	Property Get ApplicationKey As String		
		On Error Goto ErrObj
		ApplicationKey = Me.KernelObject.ApplicationKey		
		If Me.KernelObject.Error.iCode > 0 Then Error iERR_OBJECT_ERR, Me.MessageAllReceive(Me.KernelObject, iMSG_TYPE_ERROR,"")
EndTrue:
		Exit Property
EndFalse:
		ApplicationKey = ""
		Exit Property
EndError: 
		ApplicationKey=""
		Exit Property
Errobj:
		Dim sScript As String
		sScript = Me.ClassLibrary & "/Property ApplicationKey"
		Call Me.MessageAppend("",sScript,Erl,Error$, Err, "")
		Select Case Err
		Case iMSG_NEXT, iERR_NEXT: Resume Next
		Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
		Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
		Case Else: Resume EndError
		End Select
	End Property
	
	Property Get LocationCurrent As String
		On Error Goto ErrObj	
		LocationCurrent = Me.KernelObject.LocationCurrent
		If Me.KernelObject.Error.iCode > 0 Then Error iERR_OBJECT_ERR, Me.MessageAllReceive(Me.KernelObject, iMSG_TYPE_ERROR,"")
EndTrue:
		Exit Property
EndFalse:
		LocationCurrent = ""
		Exit Property
EndError:
		LocationCurrent=""
		Exit Property
Errobj:
		Dim sScript As String
		sScript = Me.ClassLibrary & "/Property ApplicationKey"
		Call Me.MessageAppend("",sScript,Erl,Error$, Err, "")
		Select Case Err
		Case iMSG_NEXT, iERR_NEXT: Resume Next
		Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
		Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
		Case Else: Resume EndError
		End Select
	End Property
	
	
	'### Konstruktor
	Sub new(objKernel As KernelZZZ) 		
		On Error Goto ErrObj
		
		If objKernel Is Nothing Then
			Error iERR_PARAM_MISSING, "KernelObject"
		Else
			Set Me.KernelObject = objKernel	
		End If
		If objKernel.Error.iCode > 0 Then Error iERR_OBJECT_ERR, Me.MessageAllReceive(objKernel,  iMSG_TYPE_ERROR, "")
		
			'###############################
EndTrue:
		Me.Error.iCode = 0
		Exit Sub
EndFalse:
		Me.Error.iCode = 0
		Exit Sub
EndError:
		Exit Sub
Errobj:
		Dim sScript As String
		sScript = Me.ClassLibrary & "\KernelThemNew_"
		Call Me.MessageAppend("",sScript,Erl,Error$, Err, "")
		Select Case Err
		Case iMSG_NEXT, iERR_NEXT: Resume Next
		Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
		Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
		Case Else: Resume EndError
		End Select
	End Sub
	
		'### Behandlung der internen Flags	
	'+++ Diese Funktion setzt die internen Flags. Mir erscheint dies besser als eine eigene Funktion für alle Flags
	Function FlagSet(sFlagName As String, bHow As Boolean) As Boolean
		Dim bReturn As Boolean
		Dim sWhat As String	
		sWhat = Trim(sFlagName)
		If Len(sWhat) = 0 Then Goto EndError
		sWhat = Lcase(sWhat)
		
		bReturn = ObjectZZZ..flagset(sWhat, bHow)
		If bReturn = True Then Goto endSuccess
		
		Select Case sWhat
		'Case "outputfrontenderror": 
		'	Me.TypeLogEntry.bFlagOutputFrontendError = bHow
		'	bReturn = True
		'Case "outputfrontend":
		'	Me.TypeLogEntry.bFlagoutputfrontend = bHow
		'	bReturn = True
		End Select		
endSuccess:
		FlagSet = bReturn
		Exit Function
endError: 
		FlagSet = False
		Exit Function
	End Function			
	
	'+++ Diese Funktion liest die internen Flags aus.
	Function FlagGet(sFlagName As String) As Boolean
		Dim sWhat As String	
		Dim bHow As Boolean
		sWhat = Trim(sFlagName) 
		If Len(sWhat) = 0 Then Goto EndError			
		sWhat = Lcase(sWhat)
		
		bHow = ObjectZZZ..flagget(sWhat)
		If bHow = True Then Goto EndSuccess
		
		Select Case sWhat
	'	Case "outputfrontenderror": bHow = Me.TypeLogEntry.bFlagoutputfrontenderror
	'	Case "outputfrontend": bHow = Me.TypeLogEntry.bFlagoutputfrontend
	'	Case Else: Goto EndError
		End Select		
endSuccess:
		FlagGet = bHow
		Exit Function
endError:
		FlagGet = False
		Exit Function
	End Function	
End Class
