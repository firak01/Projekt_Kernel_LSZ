'raus, wird in ZAPI.Basic..UI.. eingebunden %INCLUDE "C:\1fgl\workspace\Eclipse3FGL\LSZKernel\libkernel\ZAPI.Basic.Asset.lss"
'raus, wird in ZAPI.Basic..UI.. eingebunden  Use "ZAPI.Basic.Constant"
'raus, wird in ZAPI.Basic..UI.. eingebunden  Use "ZAPI.Basic.Lang.Markup"


'Leider ist es bei Verwendung von %Include nicht möglich, dass mehrere private konstanten mit dem gleichen Namen verwendet werden.
'Private Const sLibZZZ = "ZZZAPIBasicLangMarkupUI"

Function MSG2UISendZZZ(session As NotesSession, sScriptCalling As String, sMsg As String, iMsg As Integer, tp As TypeParamZZZ, sFlag As String) As Boolean
%REM
Diese Hilfsmethode kann dazu verwendet weden den eingehenden String aus einer Fehlerroutine an das Frontend auszugeben.
%END REM
	'Maximale Stringlänge
	Dim tpcall As TypeParamZZZ
	On Error Goto errhZAPI
	
	Dim iLengthmax As Integer
	iLengthmax = 254
	
	Dim vtemp, stemp
	'strExplodeByLengthZZZ_(session As notessession, sToExplode As String, iLengthin As Integer,tP As TypeParamZZZ, sFlag) As Variant
	vtemp = strExplodeByLengthZZZ_(session, sMsg, iLengthMax, tPCall, "")	
	If tpcall.ierr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	
	Dim icount
	For iCount = 0 To Ubound(vtemp)
		stemp = Inputbox("Zur weiteren Analyse kann der Fehlertext unten herauskopiert werden. Fehlercode: '"& Cstr(iMSG) & "'" , sScriptCalling & " - Fehlerausgabe " & Cstr(iCount + 1) , vtemp(iCount))		
		If Len(stemp) = 0 Then Exit For
	Next iCount	
endtrue:
	tp.ierr = 0
	MSG2UISendZZZ= True
	Exit Function
endfalse:
	tp.ierr = 0
	MSG2UISendZZZ= False
	Exit Function
enderror:
	MSG2UISendZZZ= False	
	Exit Function
ErrHZAPI:
	Dim sScript
	sScript = "ZAPI.Basic.Lang.Markup.UI\" & Getthreadinfo(LSI_THREAD_PROC)
	tP.iErr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	tP.sErr = strTagEncodingReplaceZZZ(session, tP.sErr, "", tPCall, "")
	If tPCall.ierr > 0 Then
		Msgbox tpcall.sErr
	Else		
		Msgbox tP.sErr
	End If
	Resume EndError	
End Function
Private Function strExplodeByLengthZZZ_(session As notessession, sToExplode As String, iLengthin As Integer,tP As TypeParamZZZ, sFlag) As Variant
%REM
Diese Funktion macht aus einem String ein Array
Wird benötigt zur Ausgabe in testResultUIZZZ

!!! Diese Function ist private !!!
!!! diese Function gibt es auch noch in abgewandelter Form im ZZZBasicDataTypeAllPrimitive !!!
%END REM 
	Dim saReturn() As String 
	On Error Goto errhZAPI
	
	'### variable	
	If sToExplode = "" Then Goto endFalse
	Dim iLength
	If iLengthin <= 0 Then
		Goto endfalse
	Else
		iLength = iLengthin
	End If
	
	'################
	'1.Anzahl der Einträge ermitteln
	Dim lLengthStr
	lLengthStr = Len(sToExplode) 
	If iLength >= lLengthStr Then Goto endfalse
	
	Dim iMax
	iMax = Abs(lLengthStr / iLength) 
	
	Dim saMax() As String
	Redim sa(imax) As String  'damit wird eine Arrayposition für den Rest zur verfügung gestellt
	
	Dim i, lPostemp, icounter, stemp
	i = 0
	lPostemp = 1
	For iCounter = 0 To iMax 'merke: Wenn es bei 0 anfängt, dann ist das quasi    '+1 wg des Rests
		stemp = Mid$(sToExplode, lPosTemp, iLength)
		saReturn(i) = stemp
		lPosTemp = lPosTemp + iLength
		i = i + 1		
	Next
	
	'Letztes Element checken, falls es keinen Rest gibt, der dort hineingehört
	If Len(saReturn(iMax)) = 0 Then
		Redim Preserve saReturn(iMax-1) As String
	End If
	
	'####################
EndTrue:
	tP.ierr = 0
	strExplodeByLengthZZZ_ = saReturn
	Exit Function	
endFalse:
	tp.ierr = 0
	Redim saReturn(0) As String
	saReturn(0) = sToExplode
	strExplodeByLengthZZZ_ = saReturn
	Exit Function
EndError:
	strExplodeByLengthZZZ_ = Null
	Exit Function	
errhZAPI:
	Dim sScript, tpcall As TypePAramZZZ
	sScript = "ZAPI.Basic.LangMarkup.UI\" & Getthreadinfo(LSI_THREAD_PROC)
	tP.iErr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	tP.sErr = strTagEncodingReplaceZZZ(session, tP.sErr, "", tPCall, "")
	If tPCall.ierr > 0 Then
		Msgbox tpcall.sErr
	Else		
		Msgbox tP.sErr
	End If
	Resume EndError	
End Function
