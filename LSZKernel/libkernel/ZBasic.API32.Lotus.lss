'raus, wird in ZBasic.API32.. eingebunden  %INCLUDE "C:\1fgl\workspace\Eclipse3FGL\LSZKernel\libkernel\ZAPI.Basic.Asset.lss" 
'raus, wird in ZBasic.API32.. eingebunden  Use "ZAPI.Basic.."         
'Private Const sLibZZZ = "ZBasic.API32.Lotus"
'Private Const sVerZZZ = "2005-08-29"

'+++ Für die Ausgabe des Fehlertextes basierend auf den ErrorCode, den eine API-Funktion zurückliefert
Declare Function OSLoadString Lib "nnotes.dll" ( Byval hmodule As Long, _                       
Byval status As Integer, _                                                                        
Byval s As String, _                                                                              
Byval slen As Integer _                                                                           
) As Integer 


'+++ Für das Entfernen des Flags Consistente ACL
Declare Function NSFDbOpen Lib "nnotes.dll" (Byval dbName As String, hDB As Long) As Integer 
Declare Function NSFDbClose Lib "nnotes.dll" (Byval hDB As Long) As Integer 
Declare Function NSFDbReadACL Lib "nnotes.dll" (Byval hDB As Long, hACL As Long) As Integer 
Declare Function ACLSetFlags Lib "nnotes.dll" (Byval hACL As Long, Byval Flags As Long ) As Integer 
Declare Function NSFDbStoreACL Lib "nnotes.dll" (Byval hDB As Long, Byval hACL As Long, Byval ObjectID As Long, Method As Long) As Integer 

'+++ Für das Handle auf das aktuelle Notes-Fenster, bzw. das tabbed-Fenster
Declare Function NEMGetCurrentSubprogramWindow Lib "nnotesws.dll" () As Long

'+++ Das tabbed-Fenster schliessen
Declare Function NEMStopSubprogramWindow Lib "nnotesws.dll" (Byval hwnd As Long) As Integer
Function strNotesAPIErrorGetZZZ(session As notessession, iErrorCode As Integer, tp As TypeParamZZZ, sFlag) As String
	Dim sReturn As String
	On Error Goto ErrHNoCall
	
	Dim iRetVal As Integer
	Dim sError As String * 1024
	
	sError = String(1024, 0)
	
	iRetVal = OSLoadString( 0&, iErrorCode, sError, 1023)
	
	If iRetVal <> 0 Then
		sReturn = Left$(sError, iRetVal)
	End If	
	
	'####################
EndTrue:
	tp.ierr = 0
	strNotesAPIErrorGetZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	strNotesAPIErrorGetZZZ = ""
	Exit Function
EndError:
	strNotesAPIErrorGetZZZ = ""
	Exit Function	
ErrHNoCall:
	Dim sScript As String, tpcall As TypeParamZZZ
	sScript = "ZBasic.API32.Lotus\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.serr, sScript, Erl, Error$, Err, tpcall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function dbACLFlagConsistentRemoveZZZ(session As notessession, sDBPAth As String, tP As TypeParamZZZ, sFlag) As Boolean
	On Error Goto ErrH
	Dim tpCall As TypeParamZZZ
	'####
	
	If Len(sDBPath) = 0 Then Error iERR_PARAM_MISSING, "Database path"
	
	'!!! FGL 2005-10-12 bei einer DB ohne ACL kommt es zu einer red Box
	Dim objDB As NotesDatabase
	Set objDB = New NotesDatabase("", sDBPath)
	If objDB.IsOpen Then
		Dim objACL As NotesACL
		Set objACL = objDB.Acl 'Dieses Initialisieren scheint das "Red-Box" Problem schon zu lösen
		If objACL Is Nothing Then Error iMSG_FALSE, "Database has no acl"
	End If
	
	'####################
	Dim itemp As Integer
	Dim hDB As Long, hACL As Long , rc As Variant	
	rc = NSFDbOpen(sDBPath, hDB) 
	
	itemp = Cint(rc)
	If itemp <> 0 Then  '0 = no error
		Dim sInfoReturn As String  'herausfinden was der API-Fehlercode bedeutet
		sinfoReturn = strNotesAPIErrorGetZZZ(session, itemp, tpCall, "")
		If tpcall.ierr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
		Error iMSG_FALSE, sinfoReturn  'Den so gefundenen Fehler nun auswerfen
	End If
	
	rc = NSFDbReadACL(hDB, hACL) 
	rc = ACLSetFlags(hACL, &h0) 
	rc = NSFDbStoreACL(hDB, hACL, 0, 0) 
	rc = NSFDbClose(hdb) 
	
	'####################
EndTrue:
	tp.ierr = 0
	dbACLFlagConsistentRemoveZZZ =True
	Exit Function
EndFalse:
	tp.ierr = 0
	dbACLFlagConsistentRemoveZZZ = False
	Exit Function
EndError:
	dbACLFlagConsistentRemoveZZZ = False
	Exit Function	
ErrH:
	Dim sScript As String
	sScript = "ZBasic.API32.Lotus\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpcall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function lNotesWindowTabbedHandleGetZZZ(session As notessession, tp As TypeParamZZZ, sFlag As String) As Long
	Dim lReturn As Long
	On Error Goto ErrHNoCall
	
	lReturn = NEMGetCurrentSubprogramWindow
	
	'####################
EndTrue:
	tp.ierr = 0
	lNotesWindowTabbedHandleGetZZZ= lReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	lNotesWindowTabbedHandleGetZZZ = 0
	Exit Function
EndError:
	lNotesWindowTabbedHandleGetZZZ = 0
	Exit Function	
ErrHNoCall:
	Dim sScript As String, tpcall As TypeParamZZZ
	sScript = "ZBasic.API32.Lotus\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.serr, sScript, Erl, Error$, Err, tpcall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function bNotesWindowTabbedCloseZZZ(session As notessession, lWindowHandleIn As Long, tp As TypeParamZZZ, sFlag As String) As Boolean
	On Error Goto ErrH
	Dim tpcall As TypeParamZZZ
	
	'+++ Param Check
	Dim lWindowHandle As Long
	If lWindowHandleIn <= 0 Then
		lWindowHandle = lNotesWindowTabbedHandleGetZZZ(session, tpcall, "")		
		If tpcall.iErr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
		If lWindowHandle <= 0 Then Error iERR_PARAM_VALUE, "No correct handle on tabbed window provided."
	Else
		lWindowHandle = lWindowHandleIn
	End If
	
	'###################
	'+++ Das tabbed Window im Notes Client schliessen
	Call NEMStopSubprogramWindow(lWindowHandle)
	
	'####################
EndTrue:
	tp.ierr = 0
	bNotesWindowTabbedCloseZZZ= True
	Exit Function
EndFalse:
	tp.ierr = 0
	bNotesWindowTabbedCloseZZZ = False
	Exit Function
EndError:
	bNotesWindowTabbedCloseZZZ = False
	Exit Function	
ErrH:
	Dim sScript As String
	sScript = "ZBasic.API32.Lotus\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.serr, sScript, Erl, Error$, Err, tpcall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
