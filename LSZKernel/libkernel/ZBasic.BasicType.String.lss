'raus %INCLUDE "C:\1fgl\workspace\Eclipse3FGL\LSZKernel\libkernel\ZAPI.Basic.Asset.lss" 
'raus Use "ZAPI.Basic.." 

Function bStringIsUppercaseZZZ(session As NotesSession, sStringIn As String, tp As TypeparamZZZ, sFlagControl As String) As Boolean
	On Error Goto errhNoCall
	
	'### Param Check
	If Len(sStringIn) = 0 Then Goto EndFalse
	
	'############
	
	If sStringIn <> Ucase(sStringIn) Then Goto EndFalse
	
	'######################################	
EndTrue:
	tp.ierr = 0
	bStringIsUppercaseZZZ = True
	Exit Function
EndFalse:
	tp.ierr = 0
	bStringIsUppercaseZZZ = False
	Exit Function	 
EndError:
	bStringIsUppercaseZZZ = False
	Exit Function
ErrHNoCall:
	Dim sScript As String, tpcall As TypeParamZZZ
	sScript = "ZBasic.BasicType.String\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function

Function bStringIsLowercaseZZZ(session As NotesSession, sStringIn As String, tp As TypeparamZZZ, sFlagControl As String) As Boolean
	On Error Goto errhNoCall
	
	'### Param Check
	If Len(sStringIn) = 0 Then Goto EndFalse
	
	'############
	
	If sStringIn <> Lcase(sStringIn) Then Goto EndFalse
	
	'######################################	
EndTrue:
	tp.ierr = 0
	bStringIsLowercaseZZZ = True
	Exit Function
EndFalse:
	tp.ierr = 0
	bStringIsLowercaseZZZ = False
	Exit Function	 
EndError:
	bStringIsLowercaseZZZ = False
	Exit Function
ErrHNoCall:
	Dim sScript As String, tpcall As TypeParamZZZ
	sScript = "ZBasic.BasicType.String\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function strCRLFZZZ(iNumber As Integer) As String
	Dim iCount As Integer
	For iCount = 1 To iNumber
		strCRLFZZZ = strCRLFZZZ & Chr(13) & Chr(10)
	Next iCount
End Function 
Function strDataEntryByFieldNameGetZZZ(session As notessession, sDataIn As String, sFieldNameIn As String,  tp As TypeParamZZZ, sFlag As String) As String
%REM
Diese Funktion holt sich aus einem Data$ Feld, den entsprechenden Eintrag

Merke: LCASE als Parameter bedeutet, dass alles in Kleinschrift gesucht wird, aber auch, dass der Wert in Kleinschrift zurückgegeben wird.
            NOCASE als Parameter bedeutet, 
							dass bei der Suche zunächst der normale Wert verwendet wird, 
                                   wird kein Eintrag gefunden, so wird nach ucase gesucht.
	      					
							Wird nun ein Eintrag gefunden, wird die Position im DataString ermittelt.
							Anschliessend wird aus dem OriginalDataString der Text geholt.
%END REM
'%REM
	Dim sReturn As String
	On Error Goto errhNoCall
	Dim ltemp As Long, stemp As String
	
	'###	 Param-Check
	Dim sFlagControl As String	
	If Len(sFlag) > 0 Then
		sFlagControl = Ucase(sFlag)
		If sFlagControl <> "LCASE" And sFlagControl <> "NOCASE" Then Error iERR_PARAM_VALUE, "FlagControl = '" & sFlag & "' but, expected LCASE, NOCASE"
	End If
	
	Dim sData As String
	If Len(sDataIn) = 0 Then
		Error iERR_PARAM_MISSING, "DataString'"
	Else
		sData = sDataIn
	End If 
	
	Dim sFieldname As String
	If Len(sFieldnameIn) = 0 Then
		Error iERR_PARAM_MISSING, "FieldName"
	Else
		sFieldname = sFieldnameIn
	End If
	
	'############
	
	If sFlagControl = "LCASE" Then
		sFieldname = Lcase(sFieldname)
		sData = Lcase(sData)
	End If				
	sReturn = Strright(sData, sFieldName & "#")
	sReturn = Strleft(sReturn, "||")
	
	'Erweiterte Suche
	If sFlagControl = "NOCASE" And Len(sReturn) = 0 Then
		sData = Ucase(sData)
		sFieldname = Ucase(sFieldname)
		ltemp = Instr(1,sData, sFieldName & "#")
		If ltemp > 0 Then
			stemp = Mid$(sDataIn, ltemp + Len(sFieldname) + 1)
			sReturn = Strleft(stemp, "||")
		Else
			Goto EndFalse			
		End If
		
	End If
	
	'###########
EndTrue:
	tp.ierr = 0
	strDataEntryByFieldNameGetZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	strDataEntryByFieldNameGetZZZ = ""
	Exit Function
EndError:
	strDataEntryByFieldNameGetZZZ =""
	Exit Function
ErrHNoCall:
	Dim sScript As String, tpcall As TypeParamZZZ
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
'%ENDREM
End Function
Function strReverseZZZ(session As NotesSession, sString As String,  tp As TypeParamZZZ, sFlag As String) As String	
	Dim sReturn As String
	On Error Goto ErrHNoCall
	
	Dim l As Long
	For l=Len(sString) To 1 Step -1
		sReturn = sReturn & Mid$(sString,l,1)
	Next l
	
		'##########################
EndTrue:
	tp.ierr = 0
	strReverseZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	strReverseZZZ = ""
	Exit Function
EndError:
	strReverseZZZ = ""
	Exit Function 
ErrHNoCall:
	Dim sScript As String, tpcall As TypeParamZZZ
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function strNumericRangeProofZZZ(session As notessession, sToProof As String, ll As Long, lu As Long,  tp As TypeParamZZZ, sFlag As String) As Integer
	On Error Goto errhNoCall
	
	'##################################################
	
	If Len(sToProof) = 0 Then Goto EndFalse
	
	'##################################################
	If Not Isnumeric(sToProof) Then
		Goto EndFalse
	Else
		If Clng(sToProof) > lu Or Clng(sToProof) < 0 Then
			Goto EndFalse
		End If	
	End If
	
	'##################################################
EndTrue:
	tp.ierr = 0
	strNumericRangeProofZZZ = True
	Exit Function
EndFalse:
	tp.ierr = 0
	strNumericRangeProofZZZ = False
	Exit Function
EndError:
	strNumericRangeProofZZZ = False
	Exit Function
ErrHNoCall:
	Dim sScript As String, tpCall As TypeParamZZZ
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function strReplaceSubstringZZZ(session As notessession, sWhereInput As String, sWhat As String, sReplacement As String, tp As TypeParamZZZ, sFlag As String) As String
'%REM
	Dim RR As String
	On Error Goto errhNoCall
	
	
	'##########################			
	'### Maskierung Vorbereitung
	Dim sWhere As String	
	sWhere = sWhereinput
	RR = sWhereinput
	
     'Falls nix ersetzt werden soll
	If Len(sWhat) = 0 Then Goto EndTrue
	
	'Berücksichtigung des Ausmaskierens
	Dim iCC As Integer 'der CacheCounter
	Dim iaCache() As Integer, saCache() As String	
	Dim maskright As String, maskleft As String
	iCC = - 1	
	If sWhat <> "\" Then  'Das geht nur, wenn der Backslash selbst nicht ausgetauscht werden soll
		If Instr(sWhere,"\") > 0 Then
			'Die Ausmaskierung ausschneiden und inclusive der Position in entspechenden Arrays speichern.			
			Do
				iCC = iCC + 1
				Redim Preserve iaCache(iCC) As Integer
				Redim Preserve saCache(iCC) As String
				iaCache(iCC) = Instr(sWhere,"\")
				saCache(iCC) = Mid(sWhere, iaCache(iCC), 2)
				maskleft = Left(sWhere,  iaCache(iCC) -1)
				maskright = Strright(sWhere, maskleft & saCache(iCC))
				
				sWhere = maskleft & maskright
			Loop Until Instr(sWhere,"\") = 0
		End If
	End If ' sWhat <> "\"
	
	'### Normales Ersetzen
	Dim iPos As Integer
	iPos = Instr(sWhere, sWhat) 'Die Position zum Vergleichen wo anschließend eingefügt werden soll
	If iPos > 0 Then		
		RR = Strleft(sWhere, sWhat) & sReplacement & Strright(sWhere, sWhat)
	Else
		'Wenn überhaupt keine Ersetzung stattfand, dann braucht auch die Ausmaskierung nicht rückgängig gemacht werden.
		'Es wird alles so zurückgegeben, wie es reingekommen ist.
		Goto EndTrue
	End If
	
	'### Maskierung Nachbearbeitung	
	Dim iCounter As Integer
	Dim iDiff As Integer
	iDiff = Len(sWhat)-Len(sReplacement)
	For iCounter = iCC To 0 Step -1  'Alles wieder umgekehrt zurückschreiben
		If iPos > iaCache(iCounter) - iDiff Then
			'Falls ein Wert "hinter" der Ausmaskierung ersetzt worden ist:  Es können die 'gespeicherten' Werte verwendet werden
			maskleft = Left(RR, (iaCache(iCounter)-1))
			maskright = Right(RR, Len(RR)-(iaCache(iCounter)-1)) 'Strright(RR, maskleft)
			
			RR = maskleft & saCache(iCounter) & maskright
		Else
			
			
			
			'Fall: Das Ersetzen hat die Positionswerte verschoben. Es ist nun der Längenunteschied von sWhat zu sWhere draufzurechnen
			maskleft = Left(RR, iaCache(iCounter) -1 - iDiff)
			maskright = Right(RR, Len(RR)-(iaCache(iCounter) -1 - iDiff))  'Beachte: Nur vom gespeicherten Positionswert die Länge von sWhat abziehen) 'Strright(RR, maskleft)
			
			RR = maskleft & saCache(iCounter) & maskright				
		End If
	Next iCounter
	
	
	
	'##########################
endTrue:
	tp.ierr = 0
	strReplaceSubstringZZZ = RR
	Exit Function
endFalse:
	tp.ierr = 0
	strReplaceSubstringZZZ = RR
	Exit Function
endError:
	'Im Fehlerfall ein Error-File erzeugen zum Testen der Fehlerausgabe
	'Call testResultFileZZZ(session,"", sinfo, sErr, iErr, "")
	'If iErr > 0 Then Msgbox sErr
	strReplaceSubstringZZZ = ""
	Exit Function
ErrHNoCall:
	Dim sScript As String, tpcall As TypeParamZZZ
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
'%ENDREM
End Function
Function strReplaceAllSubstringZZZ(session As notessession, sWhere As String, sWhat As String, sReplacement As String, tp As TypeParamZZZ, sFlag As String) As String
'%REM
	Dim  sReturn As String, tpCall As TypeParamZZZ
	On Error Goto errh
	
	'############	
	Dim sCurrentTry As String
	Dim iContinue As Integer
	
	If Instr(sReplacement, sWhat) Then
		'Ist der zu ersetzende String im Ersetzungsstring enthalten, dann muß anders verfahren werden		
		'todo
		
		sReturn = sWhere
		iContinue = True
		While iContinue = True	
			sCurrentTry = strReplaceSubstringZZZ(session, sReturn, sWhat, "<#!!FGLVAR!!#>", tpCall, "")
			If tpCall.iErr > 0 Then Error iERR_FUNCTION_CALL, tpCall.sErr
			If sCurrentTry = sReturn Then
				iContinue = False
			End If
			sReturn = sCurrentTry
		Wend		
		
		iContinue = True
		While iContinue = True
			sCurrentTry = strReplaceSubstringZZZ(session, sReturn, "<#!!FGLVAR!!#>", sReplacement, tpCall, "")
			If tpCall.iErr > 0 Then Error iERR_FUNCTION_CALL, tpCall.sErr
			If sCurrentTry = sReturn Then
				iContinue = False
			End If
			sReturn = sCurrentTry
		Wend
	Else		
		sReturn = sWhere
		iContinue = True
		While iContinue = True	
			sCurrentTry = strReplaceSubstringZZZ(session, sReturn, sWhat, sReplacement, tpCall, "")
			If tpCall.iErr > 0 Then Error iERR_FUNCTION_CALL, tpCall.sErr
			If sCurrentTry = sReturn Then
				iContinue = False
			End If
			sReturn = sCurrentTry
		Wend					
	End If
	
	'#######
endTrue:
	tp.ierr = 0
	strReplaceAllSubstringZZZ = sReturn
	Exit Function
endFalse:
	tp.ierr = 0
	strReplaceAllSubstringZZZ = ""
	Exit Function
endError:
	'Im Fehlerfall ein Error-File erzeugen
	'Call MSG2FileSendZZZ(session,"", sinfo, sErr, iErr, "")
	'If iErr > 0 Then Msgbox sErr
	strReplaceAllSubstringZZZ = ""
	Exit Function
ErrH:
	Dim sScript As String
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
'%ENDREM
End Function

Function strWordZZZ(session As NotesSession, sOrig As String, sDelim As String, iPos As Integer,  tp As TypeParamZZZ, sFlag As String) As String
%REM
Diese Funktion gibt einen Teilstring eines Strings zurück, der mit dem Trennzeichen getrennt wird und  
an der festgelegten Position liegt.
%END REM
'%REM
	Dim sWord As String
	On Error Goto errhNoCall
	
	'### Überprüfung der Übergabeparameter
	Dim i1 As Integer
	Dim iSplit As Integer
	Dim sRest As String	
	Dim i2 As Integer
	If ipos<1 Or sDelim = "" Or sOrig = "" Then
		Goto EndFalse
	End If
	
	'###
	i1 = 1
	iSplit = 1
	sRest = sOrig
	iSplit = Instr(1, sRest, sDelim)
	While iSplit>0 And i1<iPos
		i2 = Len(sRest)
		sRest =  Right(sRest, i2-iSplit-Len(sDelim)+1)
		i1 = i1 + 1
		iSplit = Instr(1, sRest, sDelim)
	Wend
	If i1=iPos Then
		If iSplit>0 Then
			sWord = Left(sRest, iSplit-1)
		Else
			sWord = sRest
		End If
	Else
		sWord = ""
	End If
	
	
EndTrue:
	tp.ierr = 0
	strWordZZZ = sWord
	Exit Function
endFalse:
	tp.ierr = 0
	strWordZZZ = ""
	Exit Function
endError:
	strWordZZZ = ""
	Exit Function
ErrHNoCall: 
	Dim sScript As String, tpcall As TypeParamZZZ
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
'%ENDREM
End Function
Function strCRLFReplaceZZZ(session As NotesSession, sWhatin As String, sByWhatin As String,  tp As TypeParamZZZ, sFlag As String) As String
	Dim sReturn As String, tpCall As TypeParamZZZ
	On Error Goto errh
	
      '### Parameter check
	Dim sWhat As String
	Dim sByWhat As String
	
	If Len(sWhatIn) = 0 Then
		Goto EndFalse
	Else
		sWhat = sWhatIn
	End If
	
	If sByWhatIn = "<#>" Or sByWhatIn = Chr$(13) Or sByWhatIn = Chr$(10) Then
		Error iERR_PARAM_VALUE, "Can not replace CRLF with the replacementvalue:'" & sByWhatIn & "'"
	Else
		sByWhat = sByWhatIn		
	End If
	
	
      '###########################
	'Das geht analog zu ZBasic.Formula32.EvalVarReplacementListStringInit_, ABER: NICHT DEN GLEICHEN PLATZHALTER VERWENDEN
	sWhat = strReplaceAllSubstringZZZ(session, sWhat, Chr$(13), "<#!!STRCR!!#>", tpCall, "")
	If tpcall.ierr >0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	sWhat = strReplaceAllSubstringZZZ(session, sWhat, Chr$(10), "<#!!STRLF!!#> ", tpCall, "")
	If tpcall.ierr >0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	
	sReturn = strReplaceAllSubstringZZZ(session, sWhat, "<#!!STRCR!!#><#!!STRLF!!#>", sByWhat, tpCall, "")
	If tpcall.ierr >0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	
	'Abschliessend ggf. einzelnstehende Umbrüche wieder zurücksetzen
	sReturn = strReplaceAllSubstringZZZ(session, sReturn, "<#!!STRCR!!#>", Chr$(13),tpCall, "")
	If tpcall.ierr >0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	sReturn = strReplaceAllSubstringZZZ(session, sReturn, "<#!!STRLF!!#>", Chr$(10), tpCall, "")
	If tpcall.ierr >0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	
	
	'##########################
EndTrue:
	tp.ierr = 0
	strCRLFReplaceZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	strCRLFReplaceZZZ = ""
	Exit Function
EndError:
	strCRLFReplaceZZZ = ""
	Exit Function
ErrH:
	Dim sScript As String
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function strExplodeByLengthZZZ(session As notessession, sToExplode As String, iLengthin As Integer,  tp As TypeParamZZZ, sFlag As String) As Variant
%REM
Diese Funktion macht aus einem String ein Array
%END REM
	Dim sa() As String
	On Error Goto errhNoCall
	
	'### variable
	Dim xx As String
	Dim i As Integer, imax As Integer, lPostemp As Integer, iCounter As Integer
	Dim lLengthStr As Long, iLength As Integer
	Dim stemp As String, ltemp As Long, itemp As Integer
	
	
	If sToExplode = "" Then Goto endFalse
	If iLengthin <= 0 Then
		Goto endfalse
	Else
		iLength = iLengthin
	End If
	
	'################
	'1.Anzahl der Einträge ermitteln
	lLengthStr = Len(sToExplode) 
	If iLength >= lLengthStr Then Goto endfalse
	iMax = Abs(lLengthStr / iLength) 
	
	Redim sa(imax) As String  'damit wird eine Arrayposition für den Rest zur verfügung gestellt
	
	i = 0
	lPostemp = 1
	For iCounter = 0 To iMax 'merke: Wenn es bei 0 anfängt, dann ist das quasi    '+1 wg des Rests
		stemp = Mid$(sToExplode, lPosTemp, iLength)
		sa(i) = stemp
		lPosTemp = lPosTemp + iLength
		i = i + 1		
	Next
	
	'Letztes Element checken, falls es keinen Rest gibt, der dort hineingehört
	If Len(sa(iMax)) = 0 Then
		Redim Preserve sa(iMax-1) As String
	End If
	
	'####################
EndTrue:
	tp.ierr = 0
	strExplodeByLengthZZZ = sa
	Exit Function	
endFalse:
	tp.ierr = 0
	Redim sa(0) As String
	sa(0) = sToExplode
	strExplodeByLengthZZZ = sa
	Exit Function
EndError:
	strExplodeByLengthZZZ = Null
	Exit Function	
ErrHNoCall:
	Dim sScript As String, tpcall As TypeParamZZZ
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function intStringZZZ(session As notessession, sString As String,  tp As TypeParamZZZ, sFlag As String) As Integer
	Dim iReturn As Integer
	On Error Goto errh
	
	If Len(Trim(Cstr(sString))) = 0 Then
		iReturn = 0
	Else
		iReturn = Cint(sString)
	End If
	
EndTrue:
	tp.ierr = 0
	intStringZZZ = iReturn
	Exit Function 
EndFalse:
	tp.ierr = 0
	intStringZZZ = 0
	Exit Function
EndError:
	intStringZZZ = 0
	Exit Function
ErrH:
	Dim sScript As String, tpCall As typeparamzzz
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function bStringZZZ(session As notessession, sInputin As String, tp As TypeParamZZZ, sFlagControlin As String) As Boolean
%REM
'Diese Funktion faked die Umwandlung eines Strings in einen boolean Wert,
was etwas über CBool() hinausgeht.
%END REM
	Dim bReturn, tpcall As TypePAramZZZ
	On Error Goto errh
	
      '### Parameter check
	Dim sinput As String
	If Len(sinputin) = 0 Then
		Goto EndFalse
	Else
		sinput = Ucase(sInputIn)
	End If
	
	Dim icount As Integer
	Dim iNrOfMatch As Integer
	Dim saMatch() As String
	
	'Merke: Versuchen in der Schleife keine weiteren Abfragen zu haben !!!
	iNrOfMatch = 3
	Redim saMatch(iNrOfMatch) As String
	saMatch(0) = "1"
	saMatch(1) = "-1"
	saMatch(2) = "YES"
	saMatch(3) = "TRUE"
	
		'Nun vergleichen. Merke: Hier sparen wir das Ucase()
	For icount = 0 To iNrOfMatch
		If sInput = saMatch(iCount) Then Goto EndTrue
	Next iCount
	
	
      '##########################
EndFalse:
	tp.ierr = 0
	bStringZZZ= False
	Exit Function
EndTrue:
	tp.ierr = 0
	bStringZZZ =True
	Exit Function
EndError:
	bStringZZZ= False
	Exit Function
ErrH:
	Dim sScript As String
	sScript = "ZBasic.BasicType.String\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpcall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
End Function
Function strReplaceMarginZZZ(session As notessession, sString As String, bPositionLeft As Boolean, sWhat As String, sReplacement As String, tp As TypeParamZZZ, sFlag As String) As String
'%REM
	Dim  sReturn As String, tpCall As TypeParamZZZ
	On Error Goto errh
	
	'############	
	
	If Len(sWhat) = 0 Then Goto EndFalse
	If sWhat = sReplacement Then Goto EndFalse
	
	'#############
	Dim iLen As Integer
	iLen = Len(sWhat)
	
	If bPositionLeft = True Then		
		If Left$(sString, iLen) = sWhat Then
			sReturn = sReplacement & Right$(sString, Len(sString) - iLen)			
		Else
			Goto EndFalse
		End If
	Else
		If Right$(sString, iLen) = sWhat Then
			sReturn = Left$(sString, Len(sString) - iLen) & sReplacement
		Else
			Goto EndFalse
		End If		
	End If 
	
	
	'#######
endTrue:
	tp.ierr = 0
	strReplaceMarginZZZ = sReturn
	Exit Function
endFalse:
	tp.ierr = 0
	strReplaceMarginZZZ = sString
	Exit Function
endError:
	'Im Fehlerfall ein Error-File erzeugen
	'Call MSG2FileSendZZZ(session,"", sinfo, sErr, iErr, "")
	'If iErr > 0 Then Msgbox sErr
	strReplaceMarginZZZ = ""
	Exit Function
ErrH:
	Dim sScript As String
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
'%ENDREM
End Function

Function strInsertZZZ(session As notessession, sString As String, iPosition As Integer, sWhat As String,tp As TypeParamZZZ, sFlag As String) As String
'%REM
	Dim  sReturn As String, tpCall As TypeParamZZZ
	On Error Goto errh
	
	'############	
	
	If Len(sWhat) = 0 Then Goto EndFalse 
	If iPosition < 1 Then Goto EndFalse
	
	Dim iLen As Integer
	iLen = Len(sString)
	If iPosition > iLen Then Goto EndFalse
	
	'############
	
	Dim sleft As String, sright As String
	sleft = Left$(sString, iPosition - 1)
	sright = Right$(sString, iLen - iPosition + 1)
	
	sReturn = sleft & sWhat & sright
	
	
	'#######
endTrue:
	tp.ierr = 0
	strInsertZZZ = sReturn
	Exit Function
endFalse:
	tp.ierr = 0
	strInsertZZZ = sString
	Exit Function
endError:
	'Im Fehlerfall ein Error-File erzeugen
	'Call MSG2FileSendZZZ(session,"", sinfo, sErr, iErr, "")
	'If iErr > 0 Then Msgbox sErr
	strInsertZZZ = ""
	Exit Function
ErrH:
	Dim sScript As String
	sScript = "ZBasic.DataType.AllPrimitive\" & Getthreadinfo(LSI_THREAD_PROC)
	tp.iErr = Err 'Beim wiederholten Aufruf (d.h. zwei Zeilen hintereinanger ' Error iERR_NEXT, "das ist ein text" ' aufrufen) verliert Err zwei Stellen von rechts nach dem Aufruf der MEthode objMe.MessageAppend(..) !!!! 
	tp.serr = strMsgZZZ(Nothing,  tp.sErr, sScript, Erl, Error$, Err, tpCall, "")
	If tpcall.iErr > 0 Then
		Msgbox tpcall.serr
		Resume EndError
	End If
	Select Case tp.ierr
	Case iMSG_NEXT, iERR_NEXT: Resume Next
	Case iMSG_FALSE, iERR_FALSE: Resume EndFalse
	Case iMSG_TRUE, iERR_TRUE: Resume EndTrue
	Case Else: Resume EndError		
	End Select
'%ENDREM
End Function
