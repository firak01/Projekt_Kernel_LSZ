'raus, wird in ZAPI.Basic.. eingebunden %INCLUDE "C:\1fgl\workspace\Eclipse3FGL\LSZKernel\libkernel\ZAPI.Basic.Asset.lss"
'raus, wird in ZAPI.Basic.. eingebunden  Use "ZAPI.Basic.Constant" 

Function strUniqueComputeZZZ(session As notessession, tp As TypePAramZZZ, sFlag As String) As String
	Dim sReturn As String
	On Error Goto ErrhZAPINoCall
	
	'######################################
	
	'Der "Zeit-Filename", erweitert über die Sekunden hinaus. Wichtig: Rückgabewert ist != Default-File, darum muss dieser Filename zuletzt zugewiesen werden
	Dim sDate As String
	sDate = Format(Now, "yyyy_mm_dd_hh_mm_ss")
	
	sReturn = sDate & "@" & Getthreadinfo(LSI_THREAD_PROCESS_ID) & "_" & Getthreadinfo(LSI_THREAD_TICKS)		
	
	'######################################	
EndTrue:
	tp.ierr = 0
	strUniqueComputeZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	strUniqueComputeZZZ = ""
	Exit Function	
EndError:
	strUniqueComputeZZZ = ""
	Exit Function
errhZAPINoCall:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError	
End Function

Function strExplodeZZZ(session As notessession, sToExplode As String, sSeperator As String, tp As TypeParamZZZ, sFlag As String) As Variant
'%REM
	Dim sa() As String, tpcall As TypeParamZZZ
	On Error Goto errhZAPI
	
	Dim xx As String
	Dim l As Long, lmax As Long
	
	lmax = lngStringSubstringCountZZZ(Nothing, stoExplode, sSeperator, 0, tpCall, "")
	If tPCall.ierr > 0 Then 
		tp.ierr = iERR_FUNCTION_CALL
		Goto EndError 'Error iERR_FUNCTION_CALL, tPCall.serr
	End If
	If lmax = 0 Then Goto EndFalse
	If lmax = -1 Then Error iERR_FUNCTION_CALL, "Unexpectd result calling function lngStringSubstringCountZZZ"
	
	Redim sa(lmax) As String 'Merke: Der Teilstring ist iMax im Hauptstring enthalten. Aber es sind iMax + 1 Stringbestandteile. Nun wird aber noch die Basis des Arrays als 0 berücksichtigt.	
	xx = sToExplode
	l = 0	
	While Instr(xx, sSeperator) > 0    
		sa(l ) = Left$(xx, Instr(xx, sSeperator) -1)
		xx = Mid$(xx, Instr(xx, sSeperator) + Len(sSeperator))
		l = l + 1
	Wend	
	sa(l) = xx
	
	'####################
EndTrue:
	tp.ierr = 0
	strExplodeZZZ = sa
	Exit Function	
endFalse:
	tp.ierr = 0
	Redim sa(0) As String
	sa(0) = sToExplode
	strExplodeZZZ = sa
	Exit Function
EndError:
	strExplodeZZZ = Null
	Exit Function	
errhZAPI:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError	
End Function
Function lngStringSubstringCountZZZ(session As notessession, sWhere As String, sWhat As String, iCompMethod As Integer,  tp As TypeParamZZZ, sFlag) As Long
%REM
Zählt nur die Teilstrings.

Ersetzt die Funktion strSubstringCount(..)
Diese Funktion lieferte einen Overflow, was mit der neuen Funktion nicht so leicht möglich ist.
%END REM
'%REM
	Dim lFunction As Long
	On Error Goto errhZAPINoCall
	
	'### Parameter check
	If Len(sWhere) <= 0 Or Len(sWhat) <= 0  Then
		lFunction = 0 
		Goto EndTrue
	End If
	If  iCompMethod <> 0 And iCompMethod <> 1 And iCompMethod <> 4 And iCompMethod <> 5 Then
		iCompMethod = 0
	End If
	
	'###########################
	Dim ltemp As Long
	Dim lPosToAdd As Long
	Dim lPos As Long
	
	lFunction = 0
	lPosToAdd = Len(sWhat) - 1 					'wird nämlich durch die For-Schleife schon um eins erhöht
	For lPos = 1 To Len(sWhere)					'For Schleifen sind generell viiiel schneller als While oder ähnliches !!!
		ltemp = Instr(lPos,sWhere, sWhat, iCompMethod)
		If Not Isnull(ltemp) Then
			If ltemp <> 0 Then
				lFunction = lFunction + 1
				lPos = ltemp + lPosToAdd
			Else
				Exit For
			End If 'itemp <> 0
		End If 'not isnull(itemp)
	Next lPos
	
	'##########################
EndTrue:
	tp.ierr = 0
	lngStringSubstringCountZZZ = lFunction
	Exit Function
EndFalse:
	tp.ierr = 0
	lngStringSubstringCountZZZ = -1
	Exit Function
EndError:
	lngStringSubstringCountZZZ = -1
	Exit Function
errhZAPINoCall:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError	
End Function
Function sSinkAliasCurrentGetZZZ(sessionin As notessession, tp As TypeParamZZZ, sFlagin As String) As String
	Dim sReturn As String, tpcall As TypePAramZZZ
	On Error Goto ErrhZAPI
	'##################################
	
	Dim session As notessession
	If sessionin Is Nothing Then
		Set session = New NotesSession
	Else
		Set session = sessionin
	End If
	
	sReturn = session.getEnvironmentString("DEBUG_DEFAULTSINKZZZ")
	
	'##################################
EndTrue:
	tp.ierr = 0
	sSinkAliasCurrentGetZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	sSinkAliasCurrentGetZZZ = sReturn
	Exit Function
EndError:
	Msgbox tp.serr
	sSinkAliasCurrentGetZZZ = sReturn
	Exit Function
errhZAPI:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError		
End Function
Function bSinkAliasCurrentSetZZZ(sessionin As notessession, sAliasin As String, tp As TypeParamZZZ, sFlagin As String) As Boolean
	Dim bReturn, tpcall As TypePAramZZZ
	On Error Goto ErrhZAPI
	'##################################
	
	Dim session As notessession
	If sessionin Is Nothing Then
		Set session = New NotesSession
	Else
		Set session = sessionin
	End If
	
	Dim sAlias As String
	sAlias = Ucase(Trim(sAliasIn))
	If Len(sAlias) > 0 Then 
		If sAlias <> "FILE" And sAlias <> "NONE" And sAlias <> "DOC" And sAlias <> "STATUS" Then 
 'Error iERR_PARAM_VALUE, "Sink alias = '" & sAliasin & "', but expected '', 'NONE', 'FILE', 'DOC', 'STATUS'"
			sAlias = ""
			bReturn = False
		Else
			If sAlias = "NONE" Then	sAlias = ""
			bReturn = True
		End If
	Else
		sAlias = ""		
		bReturn = True
	End If
	
	Call session.SetEnvironmentVar("DEBUG_DEFAULTSINKZZZ", sAlias)
	
	'##################################
EndTrue:
	tp.ierr = 0
	bSinkAliasCurrentSetZZZ = bReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	bSinkAliasCurrentSetZZZ = False
	Exit Function
EndError:
	Msgbox tp.serr
	bSinkAliasCurrentSetZZZ = False
	Exit Function
errhZAPI:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError	
End Function


Function MSG2SinkSendZZZ(sessionin As NotesSession, sSinkAliasin As String, doc2usein As NotesDocument, sFilePath_FormIn As String, sFilename_ItemIn As String, sMessageIn As String,  iMSGLevelin As Integer, tP As TypeParamZZZ, sFlag As String) As String
%REM
Ziel:
Die Ausgabe-Senke soll durch Konfiguration (Notes.ini) und durch die Übergabe der Parameter ermittelt werden.
Returnwert soll irgendetwas sein, was sich ggf. in einer BrowserURL nutzen lässt.
%END REM
	Dim sReturn As String, tpcall As TypePAramZZZ
	On Error Goto ErrhZAPI
	
	'+++ Falls es nix zu senden gibt, wird auch nix passieren
	If sMessageIn = "" Then Goto EndFalse
	
	'+++++++++++++++++++++++++++++++++++++++++++++++++
	Dim stemp As String
	
	'1. Ermittlung der Default-Senke aus der Notes.ini ($Debug_DefaultAliasZZZ)
	'MErke: Die Ermittlung des Sink Message-Levels hat in den jeweiligen Sink-Funktionen zu erfolgen !!!
	Dim session As notessession
	If sessionin Is Nothing Then
		Set session = New notessession
	Else
		Set session = sessionin
	End If
	
	Dim sSink As String
	sSink = Ucase(Trim(sSinkAliasIn))
	If Len(sSink) = 0 Then
		sSink = sSinkAliasCurrentGetZZZ(session, tpcall, "")
		If tpcall.ierr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	End If
	
	'2. Aufruf der entsprechenden Unterfunktion (darin werden ggf. fehlende Parameter moniert !!!
	Select Case sSink
	Case "FILE":
		'TODO: sFileName_ItemIn in die Paramterliste aufnehmen
		stemp = MSG2FileSendZZZ(session, sFilePath_FormIn, sMessageIn, iMSGLevelIn, tPcall, "")
		If tpcall.iErr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
		If Len(Trim(stemp)) = 0 Then Goto EndFalse
		
		'Aus dem zurückgegebenen Dateipfad eine URL-Notation machen
		sReturn = "file://" & stemp
		Goto EndTrue
		
	Case "STATUS":
		stemp = MSG2StatusSendZZZ(session, sMessageIn, iMSGLevelIn, tPcall, "")
		If tpcall.iErr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
		If Len(Trim(stemp)) = 0 Then Goto EndFalse
		
		Dim sserver As String
		If session.IsOnServer Then
			Dim dblog As NotesDatabase
			Set dblog = New notesdatabase("","")
			Call dblog.OpenByReplicaID("", stemp)
			If dblog Is Nothing Then
				Error iMSG_NEXT, "LOG_DATABASE (log.nsf not available)"
				sReturn = session.HttpURL
				If Len(sReturn) = 0 Then sReturn = session.CurrentDatabase.Server
			Elseif dblog.IsOpen = False Then
				Error iMSG_NEXT, "LOG_DATABASE (log.nsf not open)"
				sReturn = session.HttpURL
				If Len(sReturn) = 0 Then sReturn = session.CurrentDatabase.Server
			Else
				sReturn = dblog.HttpURL
				If Len(sReturn) = 0 Then sReturn = dblog.NotesURL			
			End If			
			Goto EndTrue
		Else
			'Der lokale Notes-Client war die Datensenke, es wurde der Text "STATUSBAR" zurückgegeben
			sServer ="NotesClient [" & Trim(session.NotesVersion) & " - " & Trim(session.NotesBuildVersion) & "]"
			sReturn = sServer & " look at " & stemp  'Auch wenn das zum gegenwärtigen Zeitpunkt vollkommener Blösinn ist. Es ist halt keine echte URL !!!
		End If		
		Goto EndTrue
		
	Case "DOC":
		stemp = MSG2DocSendZZZ(session,doc2usein, sFilePath_FormIn, sFileName_ItemIn, sMessageIn, iMSGLevelin,  tPcall, "")
		If tpcall.iErr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
		If Len(Trim(stemp)) = 0 Then Goto EndFalse
		
		'Aus dem zurückgegebenen Dateipfad eine URL-Notation machen
		Dim doctemp As notesdocument, dbtemp As notesdatabase
		If Not doc2usein Is Nothing Then
			'+++ Auf entsprechung prüfen
			If doc2usein.UniversalID = stemp Then
				If session.isonserver Then
					sReturn = doc2usein.HttpURL
					If Len(sReturn) = 0 Then sReturn = doc2usein.NotesURL
				Else
					sReturn = doc2usein.NotesURL					
				End If				
				Goto EndTrue
			Else
				'es wurde ggf. ein anders document verwendet
				Set dbtemp = session.CurrentDatabase
				Set doctemp = dbtemp.GetDocumentByUNID(stemp)
				If doctemp Is Nothing Then Error iERR_PARAM_VALUE, "Unexpected returned docid-string from 'MSG2DocSendZZZ(...)'. No document can be found with: '" & stemp & "'"
				
				If session.IsOnServer Then
					'Z.B. http://192.168.3.101/__C125700E003CD002.nsf/O/776EF1016BDAFC9FC12571140023155E    'Merke am Schluss muss dann noch ?OpenDocument angehängt werden.
					sReturn = doctemp.HttpURL
					If Len(sReturn) = 0 Then sReturn = doctemp.NotesURL  'Falls der HTTP: Task auf dem Server nicht läuft.
				Else
					sreturn = doctemp.Notesurl				
				End If
				Goto EndTrue
			End If
		Else
			'+++ Das ggf. neue Dokument suchen
			Set dbtemp = session.CurrentDatabase
			Set doctemp = dbtemp.GetDocumentByUNID(stemp)
			If doctemp Is Nothing Then Error iERR_PARAM_VALUE, "Unexpected returned docid-string from 'MSG2DocSendZZZ(...)'. No document can be found with: '" & stemp & "'"
			
			If session.IsOnServer Then
				sREturn = doctemp.HttpURL
				If Len(sReturn) = 0 Then sReturn = doctemp.NotesURL
			Else
				sreturn = doctemp.Notesurl						
			End If			
			Goto EndTrue
		End If
		
		
	Case "", "NONE":
		sReturn = "NONE"
		Goto EndTRUE
	Case Else:
		Error iERR_PARAM_VALUE, "Sink alias configured with '$Debug_DefaultSinkZZZ' in the notes.ini = '" & sSink & "', but expected 'FILE','PRINT','DOC', '', 'NONE'."
	End Select
	
EndTrue:
	tp.ierr = 0
	MSG2SinkSendZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	MSG2SinkSendZZZ = ""
	Exit Function
EndError:
	Msgbox tp.serr
	MSG2SinkSendZZZ = ""
	Exit Function
errhZAPI:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError	
End Function
Function MSG2FileSendZZZ(sessionin As NotesSession, sFileIn As String, sMessageIn As String,  iMSGLevelin As Integer, tP As TypeParamZZZ, sFlag As String) As String
%REM
Ggf. werden zwei Dateien erzeugt.
Eine Datei mit Datum-Zeitstempel
%END REM 
	Dim sReturn As String, tpcall As TypePAramZZZ
	On Error Goto ErrhZAPI
	Dim stemp As String, btemp As Boolean
	
	Dim session As NotesSession
	If sessionin Is Nothing Then
		Set session = New notessession
	Else
		Set session = sessionin
	End If
	
	'+++ 
	btemp = bSinkLevelCheckZZZ(session, iMsgLevelin, tpcall, "")
	If tpcall.ierr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	If btemp = False Then Goto EndFalse
	
	'+++
	Dim sPathin As String 'Der Pfad ist später in die Paraemterliste aufzunehmen, noch hart verdrahtet
	sPathin = "c:\fglkernel\KernelLog" 
	Dim sPath As String
	If Len(sPAthIn) = 0 Then
		sPath = session.GetEnvironmentString("Debug_OutfilePathZZZ")
		If Len(sPath) = 0 Then sPath = "c:\fglkernel\KernelLog"     'Default
	Else
		sPath = sPathin
	End If
	
	Dim sFile As String, bFlagDefaultXML As Boolean, bFlagReuse As Boolean
	'Merke: Falls irgendwo ein Dateiname definiert wurde, dann soll dieser auch wiederverwendet werden
	If Len(sFilein) = 0 Then
		sFile = session.GetEnvironmentString("Debug_OutfileNameZZZ")
		If Len(sFile) = 0 Then
			bFlagDefaultXML = True
			stemp = strUniqueComputeZZZ(session, tpcall, "")
			If tpcall.ierr > 0 Then
				tp.ierr = iERR_FUNCTION_CALL
				Goto EndError
			End If
			sFile = "ZMsg_" & stemp  & ".xml"
		Else			
			bFlagReuse = True
		End If
	Else
		sFile = sFilein
		bFlagReuse = True
	End If
	
	'### Die einzelnen Verzeichnisse untersuchen
	Dim vsaDir As Variant
	vsadir = strExplodeZZZ(session, sPath, sSEPDIRECTORYZZZ, tpcall, sFlag)
	If tPCall.ierr > 0 Then 
		tp.ierr = iERR_FUNCTION_CALL
		Goto EndError 'Error iERR_FUNCTION_CALL, tPCall.serr
	End If
	
	'+++ Lauwerk checken
	On Error Goto ErrDriveMissing
	Chdir vsadir(0) & sSEPDIRECTORYZZZ
	On Error Goto ErrhZAPI
	
	'+++ Verzeichnisse checken
	Dim sDirCur As String
	sDirCur = vsadir(0)
	
	Dim icount As Integer
	For icount = 1 To Ubound(vsadir)
		sDirCur = sDirCur & sSEPDIRECTORYZZZ & vsadir(icount)
		
		On Error Goto ErrDirectoryMissing
		Chdir sDirCur
		On Error Goto ErrhZAPI		
	Next
	
	'++++++	
	sREturn = sPath & sSEPDIRECTORYZZZ & sFile
	
	Dim ifilenum As Integer
	If bFlagReuse = False Then
		ifileNum% = Freefile()		
		Open sReturn For Output As ifilenum		
		Print #ifilenum, sMessageIn  'Merke: #write schreibt nicht den ganzen string rein, sondern ggf. nur 256 Zeichen !!!!		
		Close ifilenum
	Else
		'Straming-Klassen verwenden
		Dim nstream As notesstream
		Set nstream = session.CreateStream
		btemp = nstream.Open(sReturn)
		If btemp = False Then Error iERR_PARAM_VALUE, "Unable to open file '" & sReturn & "'"
		
		Call nstream.WriteText(sMessagein)
		Call nstream.Close
	End If	
	
	'Merke: Die Default-Datei niemals permant erweitern. Wie gross soll sie denn werden !!!!
	If bFlagDefaultXML = True Then
		ifileNum% = Freefile()	
		Open sPath & sSEPDIRECTORYZZZ & "ZMsg.xml" For Output As ifilenum	
		Print #ifilenum, sMessageIn  'Merke: #write schreibt nicht den ganzen string rein, sondern ggf. nur 256 Zeichen !!!!	
		Close ifilenum
	End If
	
EndTrue:
	tp.ierr = 0
	MSG2FileSendZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	MSG2FileSendZZZ = ""
	Exit Function
EndError:
	MSG2FileSendZZZ = ""
	Exit Function
errDriveMissing: 
	'Wenn hier der Code ankommt, dann ist das Laufwerk nicht vorhanden !!! Da kannste machen nix.
	tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>ZAPI.Basic.ZMessage\"  & Getthreadinfo(LSI_THREAD_PROC) & "</script><line>" & cstr(Erl) & "</line><code>" & cstr(iERR_PARAM_VALUE) & _
 "</code><err>The drive provided by the path is not available or the path is relative: '" & sPath & "'" & "</err></zMessage>|
	Resume EndError
errDirectoryMissing:
	'Wenn hier der Code ankommet, dann ist das Verzeichnis nicht vorhanden !!! Versuchen es zu erstellen
	On Error Goto ErrhZAPI
	Mkdir sdircur
	Resume Next	
errhZAPI:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError	
End Function

Function MSG2StatusSendZZZ(sessionin As NotesSession, sMessageIn As String,  iMsgLevelIn As Integer, tP As TypeParamZZZ, sFlag As String) As String
	Dim sReturn As String, tpcall As TypePAramZZZ
	On Error Goto ErrhZAPI
	Dim btemp As Boolean
	
	Dim session As NotesSession
	If sessionin Is Nothing Then
		Set session = New NotesSession
	Else 
		Set session = sessionin
	End If
	
	'+++ 
	btemp = bSinkLevelCheckZZZ(session, iMsgLevelin, tpcall, "")
	If tpcall.ierr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	If btemp = False Then Goto EndFalse
	
	'### Ausgabe serverseitig in log.nsf / Clientseitig in statusbar
	Print sMessageIn
	
	'### Rückgaebewert
	If session.IsOnServer = True Then
		Dim dblog As NotesDatabase
		Set dblog = session.GetDatabase("", "log.nsf", False)
		If dblog Is Nothing Then
			sReturn = "LOG_DATABASE (log.nsf not available)"
			Goto EndTrue
		End If
		If dblog.IsOpen = False Then
			sReturn = "LOG_DATABASE (log.nsf not open)"
			Goto EndTrue
		End If
		sReturn = dblog.ReplicaID		
	Else
		sReturn = "STATUSBAR"			
	End If
	
	
	
EndTrue:
	tp.ierr = 0
	MSG2StatusSendZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	MSG2StatusSendZZZ = ""
	Exit Function
EndError:
	Msgbox tp.serr
	MSG2StatusSendZZZ = ""
	Exit Function
errhZAPI:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError	
End Function
Function MSG2DocSendZZZ(sessionin As notessession, docin As NotesDocument, sFormnamein As String, sItemnamein As String, sMessagein As String, iMsgLevelin As Integer, tp As TypeParamZZZ, sFlag As String) As String
	Dim sReturn As String, tpcall As TypePAramZZZ
	On Error Goto ErrhZAPI
	Dim btemp As Boolean
	'############################
	Dim session As notessession
	If sessionin Is Nothing Then
		Set session = New notessession
	Else
		Set session = sessionin 
	End If
	
	'+++ 
	btemp = bSinkLevelCheckZZZ(session, iMsgLevelin, tpcall, "")
	If tpcall.ierr > 0 Then Error iERR_FUNCTION_CALL, tpcall.serr
	If btemp = False Then Goto EndFalse
	
	'+++ 
	Dim sMessage As String
	sMessage = sMessagein 'Merke: Anders als beim Kernellog sollte in der Message nun NICHT der Message-Level-Wert angegeben werden. Grund: Dann kann man so keine XML-Messages mehr schreiben !!!
	
	
	'+++
	Dim doc As NotesDocument
	If docin Is Nothing Then
		Dim dbcur As notesdatabase
		Set dbcur = session.CurrentDatabase
		
		Dim sFormname As String
		If Len(sFormnamein) = 0 Then
			sFormname = session.GetEnvironmentString("Debug_FormNameZZZ")			
			If Len(sFormname) = 0 Then sFormname = "Log Entry"
		Else
			sFormname = sFormnamein
		End If		
		
		Set doc = dbcur.CreateDocument
		doc.form = sFormname		
	Else
		Set doc = docin
	End If
	
	'+++
	Dim sItemname As String
	If Len(sItemnamein) = 0 Then
		sITemname = session.GetEnvironmentString("Debug_ItemName")
		If Len(sItemname) = 0 Then sItemname = "BodyZZZ"                               'Merke: "A$ErrMsg" ist zwar das Standardfeld für die Noteslog-Klasse, aber wir verwenden hier ein RTF-Feld
	Else
		sItemname =sItemnameIn
	End If
	
	Dim item As Variant   'wg. rtf-items
	If Not doc.HasItem(sItemname) Then
		'Besser ein RTF-item erzeugen
		Set item = New NotesRichTextItem(doc, sItemname)
		Call item.Appendtext(sMessage)
		Call item.addnewline(1)		
	Else
		Set item = doc.GetFirstItem(sItemname)
		If item.type = RICHTEXT Then
			Call item.Appendtext(sMessage)
			Call item.addnewline(1)
		Else
			sMessage = sMessage + Chr(13) & Chr(10) 
			Call item.appendtotexttextlist(sMEssage)
		End If
	End If
	
	btemp = doc.Save(True, False, False)
	If btemp = False Then Error iERR_PARAM_VALUE, "Unable to save log document (as message sink) in database: '" & dbcur.Title & "'"
	
	sReturn = doc.UniversalID
	
	'############################
EndTrue:
	tp.ierr = 0
	MSG2DocSendZZZ = sReturn
	Exit Function
EndFalse:
	tp.ierr = 0
	MSG2DocSendZZZ = ""
	Exit Function
EndError:
	Msgbox tp.serr
	MSG2DocSendZZZ = ""
	Exit Function
errhZAPI:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError	
End Function

Function bSinkLevelCheckZZZ(session As notessession, iMSGLevelin As Integer, tp As TypeParamzzz, sflagin As String) As Boolean
	On Error Goto ErrhZAPI
	Dim stemp As String
	
	stemp = Trim(session.GetEnvironmentString("DEBUG_SINKLEVELZZZ"))
	If Len(stemp) = 0 Then
		If iMSGLevelIn > 1 Then Goto EndFalse
	Else
		If Not Isnumeric(stemp) Then Error iERR_PARAM_VALUE, "Notes.ini parameter 'DEBUG_SINKLEVELZZZ' is expected to be nummeric"
		If iMSGLevelIn > Cint(stemp) Then Goto EndFalse
	End If
	
	
	'############################
EndTrue:
	tp.ierr = 0
	bSinkLevelCheckZZZ = True
	Exit Function
EndFalse:
	tp.ierr = 0 
	bSinkLevelCheckZZZ = False
	Exit Function
EndError:
	Msgbox tp.serr
	bSinkLevelCheckZZZ = False
	Exit Function
errhZAPI:
	Dim sScript As String
	sScript = "ZAPI.Basic.Message\"  & Getthreadinfo(LSI_THREAD_PROC)
	tP.ierr = Err
	If tP.ierr >= 10000 Then
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err>" & Error$ & |</err></zMessage>|
	Else
		tP.serr = |<?xml version="1.0" encoding="iso-8859-1" ?><zMessage><script>| & sScript & "</script><line>" & Erl & "</line><code>" & Cstr(Err) & "</code><err><![CDATA[" & Error$ & |]]></err></zMessage>|
	End If
	Msgbox tP.sErr
	Resume EndError	
End Function
